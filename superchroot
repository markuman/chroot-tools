#!/bin/bash
# WTFPL

set -e 

## functions
# ==========

set_chroot (){

        case "$option" in
                "exit")         chroot_umount $folder ;;
                "proot")        chroot_proot $folder ;;
                "fakechroot")   chroot_fakechroot $folder ;;
                "systemd")      chroot_systemd $folder ;;
                "chroot")       chroot_chroot $folder ;;
                "arch")         chroot_arch $folder ;;
                *)              printf "unknown option\n" ;;
        esac

}

super_chroot(){

	if [ "$UID" -ne 0 ]; then

                if which fakechroot >/dev/null; then
			printf "fakechroot found...\n"
			chroot_fakechroot $folder

                elif which proot >/dev/null; then
			printf "proot found ...\n"
                        chroot_proot $folder

                else
                        printf "I can not find fakechroot nor proot and you aren't root. Sorry, but I can\'t chroot.\n"
                fi
        else

                if which systemd-nspawn >/dev/null; then
                        chroot_systemd $folder

		elif which arch-chroot >/dev/null; then
			chroot_arch $folder

                else
                        printf "\nRunning classic chroot with mount -t... \n\n"
			chroot_chroot $folder
                fi
        fi

}




chroot_mount() {

	mount proc "$folder/proc" -t proc -o nosuid,noexec,nodev &&
	mount sys "$folder/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
	mount udev "$folder/dev" -t devtmpfs -o mode=0755,nosuid &&
	mount devpts "$folder/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
	mount shm "$folder/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev &&
	mount run "$folder/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
	mount tmp "$folder/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid

}

chroot_umount() {

	printf "Trying to umount chroot folder ...\n"
	umount "$folder/proc"
	umount "$folder/sys"
	umount "$folder/dev"
	umount "$folder/dev/pts"
	umount "$folder/dev/shm"
	umount "$folder/run"
	umount "$folder/tmp"

}

chroot_proot(){

	proot -r $folder

}

chroot_fakechroot(){

	export FAKECHROOT_EXCLUDE_PATH=/proc:/dev:/sys
	fakechroot -s fakeroot chroot $folder

}

chroot_systemd(){

	systemd-nspawn -D $folder

}

chroot_arch(){

	arch-chroot $folder

}

chroot_chroot(){

	if mount | grep $folder/dev > /dev/null; then
		chroot $folder $terminal
	else
		chroot_mount "$folder"
		chroot $folder $terminal
	fi

}

print_help(){

	echo '
        superchroot <folder>
        superchroot [chroot-option] <folder>

        [chroot options]: systemd (root), chroot (root), arch (root), fakechroot, proot, exit (umount directories from chroot methode)


        EXAMPLES - force method
        ~$: su -c "superchroot systemd arch/"
        ~$: sudo superchroot chroot arch/
        ~$: superchroot proot arch/
        ~$: superchroot fakechroot arch/

        EXAMPLES - automaticaly best choice
        ~#: superchroot arch/
        ~$: superchroot arch/
	'

}

## Variable
## ========

terminal="/bin/bash"


## MAIN
## ====

if (("$#" == 1)); then

        if [[ "$1" = "--help" ]]; then
		print_help
		exit
	fi

	folder=$1
	super_chroot "$@"

elif (("$#" == 2)); then

	option=$1
	folder=$2
	set_chroot "$@"
else
        printf "Wrong usage!\n\n"
        print_help
	exit
fi

